//@version=6
indicator(title="MACD Integration for GemHunter (Smoothed)", shorttitle="GemHunter MACD+", overlay=false)

// ── Inputs
source        = input.source(close, title="Source")
fastLength    = input.int(12,  title="Fast Length",   minval=1)
slowLength    = input.int(26,  title="Slow Length",   minval=1)
signalLength  = input.int(9,   title="Signal Length", minval=1)
maType        = input.string(defval="SuperSmoother", title="MA Type",
                 options=["EMA","DEMA","TEMA","SuperSmoother","RMA"])
useVolume     = input.bool(true,  title="Use Volume Factor")
volSmaLen     = input.int(50,     title="Volume SMA Len",   minval=1)
volEmaLen     = input.int(10,     title="Volume EMA Len",   minval=1)
volCap        = input.float(1.8,  title="Volume Factor Cap (x)", minval=0.5, step=0.1)
mtfTF         = input.timeframe("", title="MTF Confirm TF (optional)")
showHist      = input.bool(true,  title="Show Histogram")
showCross     = input.bool(true,  title="Show Cross Dots")
showDiv       = input.bool(false, title="Show Divergence (pivot-based)")
// Extra visual smoothing (EMA)
macdSmoothLen = input.int(3, title="Extra MACD Smooth",  minval=0)
sigSmoothLen  = input.int(3, title="Extra Signal Smooth",minval=0)
histSmoothLen = input.int(2, title="Extra Hist Smooth",  minval=0)

// ── MAs
dema(src, l) => 2*ta.ema(src, l) - ta.ema(ta.ema(src, l), l)
tema(src, l) =>
    e1 = ta.ema(src, l)
    e2 = ta.ema(e1, l)
    e3 = ta.ema(e2, l)
    3*(e1 - e2) + e3
// Ehlers 2-pole SuperSmoother
superSmoother(src, length) =>
    PI = 3.141592653589793
    a1 = math.exp(-1.414*PI/length)
    b1 = 2*a1*math.cos(1.414*PI/length)
    c2 = b1
    c3 = -a1*a1
    c1 = 1 - c2 - c3
    var float filt = na
    filt := na(filt[1]) ? src : c1*(src + nz(src[1]))/2 + c2*nz(filt[1]) + c3*nz(filt[2])
    filt

ma(src, l) =>
    switch maType
        "EMA"          => ta.ema(src, l)
        "DEMA"         => dema(src, l)
        "TEMA"         => tema(src, l)
        "RMA"          => ta.rma(src, l)
        => superSmoother(src, math.max(l, 2))

emaIf(src, l) => l > 0 ? ta.ema(src, l) : src

// ── Non-repainting HTF wrapper (confirmed only)
htfConfirm(expr) =>
    mtfTF == "" ? expr : request.security(syminfo.tickerid, mtfTF, barstate.isconfirmed ? expr : nz(expr[1]), barmerge.gaps_off, barmerge.lookahead_off)

// ── Core MACD (smoothed + volume-normalized)
fastMA  = ma(source, fastLength)
slowMA  = ma(source, slowLength)
macdRaw = fastMA - slowMA

volNorm = volume / nz(ta.sma(volume, volSmaLen))
volFac  = useVolume ? math.min(volCap, math.max(1/volCap, ta.ema(volNorm, volEmaLen))) : 1.0
macd    = macdRaw * volFac

signal  = ta.ema(macd, signalLength)
macd    := emaIf(macd,  macdSmoothLen)
signal  := emaIf(signal, sigSmoothLen)
hist    = macd - signal
hist    := emaIf(hist,  histSmoothLen)

// ── MTF confirm series
macdHTF   = htfConfirm(macd)
signalHTF = htfConfirm(signal)

// ── Cross logic (align with HTF if set)
bullCross = ta.crossover(macd, signal)  and (mtfTF == "" or macdHTF > signalHTF)
bearCross = ta.crossunder(macd, signal) and (mtfTF == "" or macdHTF < signalHTF)

// ── Divergence (pivot-based, optional)
left = 5
right = 5
pl = ta.pivotlow(low, left, right)
ph = ta.pivothigh(high, left, right)
plCond = not na(pl)
phCond = not na(ph)
lastPL      = ta.valuewhen(plCond, pl, 0)
prevPL      = ta.valuewhen(plCond, pl, 1)
lastPLmacd  = ta.valuewhen(plCond, macd[right], 0)
prevPLmacd  = ta.valuewhen(plCond, macd[right], 1)
bullDiv = showDiv and plCond and lastPL < prevPL and lastPLmacd > prevPLmacd

lastPH      = ta.valuewhen(phCond, ph, 0)
prevPH      = ta.valuewhen(phCond, ph, 1)
lastPHmacd  = ta.valuewhen(phCond, macd[right], 0)
prevPHmacd  = ta.valuewhen(phCond, macd[right], 1)
bearDiv = showDiv and phCond and lastPH > prevPH and lastPHmacd < prevPHmacd

// ── Plots
plot(macd,   "MACD",        color=color.purple, linewidth=2)
plot(signal, "Signal Line", color=color.blue,   linewidth=2)
plot(showHist ? hist : na, "Histogram",
     color=color.new(hist >= 0 ? color.green : color.red, 0),
     style=plot.style_histogram, linewidth=2)

plot(showCross and bullCross ? macd : na, "Cross Over",  style=plot.style_circles, color=color.green, linewidth=3)
plot(showCross and bearCross ? macd : na, "Cross Under", style=plot.style_circles, color=color.red,   linewidth=3)

hline(0, "Zero Line", color=color.gray)

// Optional divergence markers
plotshape(bullDiv, title="Bull Div", style=shape.triangleup,   location=location.belowbar, color=color.new(color.green,0), size=size.tiny, text="DIV")
plotshape(bearDiv, title="Bear Div", style=shape.triangledown, location=location.abovebar, color=color.new(color.red,0),   size=size.tiny, text="DIV")
